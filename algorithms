import time
import random
import logging
import matplotlib.pyplot as plt

# Configure logging to write to a file with timestamps
logging.basicConfig(filename='sorting_performance.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Set a random seed for reproducibility
random.seed(42)

def generate_random_list(size, upper_bound):
    """Generate a list of random integers."""
    if size <= 0:
        raise ValueError("Size should be greater than 0")
    return [random.randint(0, upper_bound) for _ in range(size)]

def measure_runtime(func, arr):
    """Measure the runtime of a sorting function, excluding array copying time."""
    copied_arr = arr.copy()
    start_time = time.perf_counter()  # Improved precision with perf_counter
    func(copied_arr)
    elapsed_time = (time.perf_counter() - start_time) * 1000  # Convert to milliseconds
    return elapsed_time

def run_sorting_algorithms(arr_sizes):
    """Run, measure, and visualize sorting algorithms on arrays of different sizes."""
    sorting_algorithms = [
        bubble_sort, selection_sort, insertion_sort, shell_sort,
        merge_sort, quick_sort, heap_sort, counting_sort,
        radix_sort, bucket_sort, timsort
    ]

    times = {alg.__name__: [] for alg in sorting_algorithms}
    sizes = []

    for size in arr_sizes:
        arr = generate_random_list(size, size)
        sizes.append(size)
        logging.info(f'\nArray size: {size}')
        print(f"\nArray size: {size}")  # Output size information to terminal
        for sort_func in sorting_algorithms:
            runtime = measure_runtime(sort_func, arr)
            times[sort_func.__name__].append(runtime)
            logging.info(f"{sort_func.__name__} took {runtime:.2f} ms")
            print(f"{sort_func.__name__} took {runtime:.2f} ms")  # Output runtime to terminal

    plt.figure(figsize=(10, 8))  # Set figure size for better readability
    for name, runtimes in times.items():
        plt.plot(sizes, runtimes, label=name)

    plt.xlabel('Array Size')
    plt.ylabel('Time (ms)')
    plt.title('Sorting Algorithm Performance')
    plt.legend()
    plt.grid(True)
    plt.yscale('log')  # Logarithmic scale for better visualization
    plt.show()

def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]

def selection_sort(arr):
    for i in range(len(arr)):
        min_idx = i
        for j in range(i+1, len(arr)):
            if arr[min_idx] > arr[j]:
                min_idx = j
        arr[i], arr[min_idx] = arr[min_idx], arr[i]

def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and arr[j] > key:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key

def shell_sort(arr):
    n = len(arr)
    gap = n // 2
    while gap > 0:
        for i in range(gap, n):
            temp = arr[i]
            j = i
            while j >= gap and arr[j - gap] > temp:
                arr[j] = arr[j - gap]
                j -= gap
            arr[j] = temp
        gap //= 2

def merge_sort(arr):
    if len(arr) > 1:
        mid = len(arr) // 2
        L = arr[:mid]
        R = arr[mid:]

        merge_sort(L)
        merge_sort(R)

        i = j = k = 0

        while i < len(L) and j < len(R):
            if L[i] < R[j]:
                arr[k] = L[i]
                i += 1
            else:
                arr[k] = R[j]
                j += 1
            k += 1

        while i < len(L):
            arr[k] = L[i]
            i += 1
            k += 1

        while j < len(R):
            arr[k] = R[j]
            j += 1
            k += 1

def quick_sort(arr):
    def partition(low, high):
        pivot = arr[(low + high) // 2]
        left = low
        right = high
        while True:
            while arr[left] < pivot:
                left += 1
            while arr[right] > pivot:
                right -= 1
            if left >= right:
                return right
            arr[left], arr[right] = arr[right], arr[left]
            left += 1
            right -= 1

    def quick_sort_rec(low, high):
        if low < high:
            pi = partition(low, high)
            quick_sort_rec(low, pi)
            quick_sort_rec(pi + 1, high)

    quick_sort_rec(0, len(arr) - 1)

def heap_sort(arr):
    def heapify(n, i):
        largest = i
        l = 2 * i + 1
        r = 2 * i + 2

        if l < n and arr[l] > arr[i]:
            largest = l
        if r < n and arr[r] > arr[largest]:
            largest = r
        if largest != i:
            arr[i], arr[largest] = arr[largest], arr[i]
            heapify(n, largest)

    n = len(arr)
    for i in range(n, -1, -1):
        heapify(n, i)
    for i in range(n-1, 0, -1):
        arr[i], arr[0] = arr[0], arr[i]
        heapify(i, 0)

def counting_sort(arr):
    max_val = max(arr)
    m = max_val + 1
    count = [0] * m

    for a in arr:
        count[a] += 1
    i = 0
    for a in range(m):
        for c in range(count[a]):
            arr[i] = a
            i += 1

def radix_sort(arr):
    RADIX = 10
    placement = 1
    max_digit = max(arr)

    while placement <= max_digit:
        buckets = [list() for _ in range(RADIX)]
        for i in arr:
            tmp = int((i / placement) % RADIX)
            buckets[tmp].append(i)
        a = 0
        for b in range(RADIX):
            buck = buckets[b]
            for i in buck:
                arr[a] = i
                a += 1
        placement *= RADIX

def bucket_sort(arr):
    max_elem = max(arr)
    bucket_count = len(arr) // 10 or 10  # Adjusting bucket count based on the data range
    buckets = [[] for _ in range(bucket_count)]

    for number in arr:
        index = min(number * bucket_count // (max_elem + 1), bucket_count - 1)
        buckets[index].append(number)

    k = 0
    for bucket in buckets:
        for number in sorted(bucket):
            arr[k] = number
            k += 1

def timsort(arr):
    arr.sort()

def main():
    sizes = [100, 1000, 10000, 100000]  # Increased the largest size for more extensive testing
    try:
        run_sorting_algorithms(sizes)
    except ValueError as e:
        logging.error(f"Error: {e}")
        print(f"Error: {e}")  # Also output errors to the terminal

if __name__ == "__main__":
    main()
